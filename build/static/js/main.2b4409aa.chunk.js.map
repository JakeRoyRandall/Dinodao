{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","useWeb3","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","getAll","then","catch","err","length","proposalId","getAllClaimerAddresses","addresess","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","setProviderOrSigner","balanceOf","balance","gt","name","className","onClick","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","value","defaultChecked","htmlFor","label","disabled","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.2b4409aa.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\n// We can grab a reference to our ERC-1155 contract.\nconst bundleDropModule = sdk.getBundleDropModule(\n\t\"0x6401050131A4E5087f38A156eB677e2EBC1237f6\",\n);\n\nconst tokenModule = sdk.getTokenModule(\n\t\"0x36BE30271Da442337eaE7a2f5E39630440a7c52F\"\n);\n\nconst voteModule = sdk.getVoteModule(\n\t\"0xf0866E4B6265AC8e374bF823df82e5ACCd3982d6\",\n);\n\nconst App = () => {\n\tconst { connectWallet, address, error, provider } = useWeb3();\n\tconsole.log(\"ðŸ‘‹ Address:\", address)\n\t\n\tconst signer = provider ? provider.getSigner() : undefined;\n\tconst [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n\tconst [isClaiming, setIsClaiming] = useState(false);\n\tconst [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n\tconst [memberAddresses, setMemberAddresses] = useState([]);\n\tconst [proposals, setProposals] = useState([]);\n\tconst [isVoting, setIsVoting] = useState(false);\n\tconst [hasVoted, setHasVoted] = useState(false);\n\n\t// Retreive all our existing proposals from the contract.\n\tuseEffect(() => {\n\tif (!hasClaimedNFT) { return; }\n\n\t// A simple call to voteModule.getAll() to grab the proposals.\n\tvoteModule\n\t\t.getAll()\n\t\t.then((proposals) => {\n\t\t// Set state!\n\t\tsetProposals(proposals);\n\t\tconsole.log(\"ðŸŒˆ Proposals:\", proposals)\n\t\t})\n\t\t.catch((err) => {\n\t\tconsole.error(\"failed to get proposals\", err);\n\t\t});\n\t}, [hasClaimedNFT]);\n\n\t// We also need to check if the user already voted.\n\tuseEffect(() => {\n\tif (!hasClaimedNFT) {\n\t\treturn;\n\t}\n\n\t// If we haven't finished retreieving the proposals from the useEffect above\n\t// then we can't check if the user voted yet!\n\tif (!proposals.length) {\n\t\treturn;\n\t}\n\n\t// Check if the user has already voted on the first proposal.\n\tvoteModule\n\t\t.hasVoted(proposals[0].proposalId, address)\n\t\t.then((hasVoted) => {\n\t\tsetHasVoted(hasVoted);\n\t\tconsole.log(\"ðŸ¥µ User has already voted\")\n\t\t})\n\t\t.catch((err) => {\n\t\tconsole.error(\"failed to check if wallet has voted\", err);\n\t\t});\n\t}, [hasClaimedNFT, proposals, address]);\n\n\tconst shortenAddress = (str) => {\n\t\treturn str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n\t  };\n\n\tuseEffect(() => {\n\t\tif (!hasClaimedNFT) { return; }\n\t\tbundleDropModule\n\t\t\t.getAllClaimerAddresses(\"0\")\n\t\t\t.then((addresess) => {\n\t\t\t\tconsole.log(\"ðŸš€ Members addresses\", addresess)\n\t\t\t\tsetMemberAddresses(addresess);\n\t\t\t})\n\t\t\t.catch((err) => { console.error(\"failed to get member list\", err); });\n\t}, [hasClaimedNFT]);\n  \n  useEffect(() => {\n\tif (!hasClaimedNFT) { return; }\n  \n\ttokenModule\n\t\t.getAllHolderBalances()\n\t\t.then((amounts) => {\n\t\t\tconsole.log(\"ðŸ‘œ Amounts\", amounts)\n\t\t\tsetMemberTokenAmounts(amounts);\n\t\t})\n\t\t.catch((err) => { console.error(\"failed to get token amounts\", err); });\n\t}, [hasClaimedNFT]);\n  \n\t// Now, we combine the memberAddresses and memberTokenAmounts into a single array\n\tconst memberList = useMemo(() => {\n\t\treturn memberAddresses.map((address) => {\n\t\t\treturn {\n\t\t\t\taddress,\n\t\t\t\ttokenAmount: ethers.utils.formatUnits( memberTokenAmounts[address] || 0, 18 ),\n\t\t\t};\n\t\t});\n\t}, [memberAddresses, memberTokenAmounts]);\n\n\n\tuseEffect(() => { sdk.setProviderOrSigner(signer); }, [signer]);\n\n\tuseEffect(() => {\n\t\t// If they don't have an connected wallet, exit!\n\t\tif (!address) {\n\t\treturn;\n\t\t}\n\t\t\n\t\t// Check if the user has the NFT by using bundleDropModule.balanceOf\n\t\treturn bundleDropModule\n\t\t.balanceOf(address, \"0\")\n\t\t.then((balance) => {\n\t\t\t// If balance is greater than 0, they have our NFT!\n\t\t\tif (balance.gt(0)) {\n\t\t\tsetHasClaimedNFT(true);\n\t\t\tconsole.log(\"ðŸŒŸ this user has a membership NFT!\")\n\t\t\t} else {\n\t\t\tsetHasClaimedNFT(false);\n\t\t\tconsole.log(\"ðŸ˜­ this user doesn't have a membership NFT.\")\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tsetHasClaimedNFT(false);\n\t\t\tconsole.error(\"failed to nft balance\", error);\n\t\t});\n\t}, [address]);\n\n\n\tif (error && error.name === \"UnsupportedChainIdError\") {\n\t\treturn (\n\t\t  <div className=\"unsupported-network\">\n\t\t\t<h2>Please connect to Rinkeby</h2>\n\t\t\t<p>\n\t\t\t  This dapp only works on the Rinkeby network, please switch networks\n\t\t\t  in your connected wallet.\n\t\t\t</p>\n\t\t  </div>\n\t\t);\n\t  }\n\n\t\tif (!address) {\n\t\t\treturn (\n\t\t\t  <div className=\"landing\">\n\t\t\t\t<h1>Welcome to DinoDAO</h1>\n\t\t\t\t<button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n\t\t\t\t  Connect your wallet\n\t\t\t\t</button>\n\t\t\t  </div>\n\t\t\t);\n\t\t  }\n\n if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>ðŸ¦– DAO Member Page</h1>\n        <p>Congratulations on being a member</p>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                //before we do async things, we want to disable the button to prevent double clicks\n                setIsVoting(true);\n\n                // lets get the votes from the form for the values\n                const votes = proposals.map((proposal) => {\n                  let voteResult = {\n                    proposalId: proposal.proposalId,\n                    //abstain by default\n                    vote: 2,\n                  };\n                  proposal.votes.forEach((vote) => {\n                    const elem = document.getElementById(\n                      proposal.proposalId + \"-\" + vote.type\n                    );\n\n                    if (elem.checked) {\n                      voteResult.vote = vote.type;\n                      return;\n                    }\n                  });\n                  return voteResult;\n                });\n\n                // first we need to make sure the user delegates their token to vote\n                try {\n                  //we'll check if the wallet still needs to delegate their tokens before they can vote\n                  const delegation = await tokenModule.getDelegationOf(address);\n                  // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n                  if (delegation === ethers.constants.AddressZero) {\n                    //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                    await tokenModule.delegateTo(address);\n                  }\n                  // then we need to vote on the proposals\n                  try {\n                    await Promise.all(\n                      votes.map(async (vote) => {\n                        // before voting we first need to check whether the proposal is open for voting\n                        // we first need to get the latest state of the proposal\n                        const proposal = await voteModule.get(vote.proposalId);\n                        // then we check if the proposal is open for voting (state === 1 means it is open)\n                        if (proposal.state === 1) {\n                          // if it is open for voting, we'll vote on it\n                          return voteModule.vote(vote.proposalId, vote.vote);\n                        }\n                        // if the proposal is not open for voting we just return nothing, letting us continue\n                        return;\n                      })\n                    );\n                    try {\n                      // if any of the propsals are ready to be executed we'll need to execute them\n                      // a proposal is ready to be executed if it is in state 4\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          // we'll first get the latest state of the proposal again, since we may have just voted before\n                          const proposal = await voteModule.get(\n                            vote.proposalId\n                          );\n\n                          //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                          if (proposal.state === 4) {\n                            return voteModule.execute(vote.proposalId);\n                          }\n                        })\n                      );\n                      // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                      setHasVoted(true);\n                      // and log out a success message\n                      console.log(\"successfully voted\");\n                    } catch (err) {\n                      console.error(\"failed to execute votes\", err);\n                    }\n                  } catch (err) {\n                    console.error(\"failed to vote\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to delegate tokens\");\n                } finally {\n                  // in *either* case we need to set the isVoting state to false to enable the button again\n                  setIsVoting(false);\n                }\n              }}\n            >\n              {proposals.map((proposal, index) => (\n                <div key={proposal.proposalId} className=\"card\">\n                  <h5>{proposal.description}</h5>\n                  <div>\n                    {proposal.votes.map((vote) => (\n                      <div key={vote.type}>\n                        <input\n                          type=\"radio\"\n                          id={proposal.proposalId + \"-\" + vote.type}\n                          name={proposal.proposalId}\n                          value={vote.type}\n                          //default the \"abstain\" vote to chedked\n                          defaultChecked={vote.type === 2}\n                        />\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                          {vote.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <button disabled={isVoting || hasVoted} type=\"submit\">\n                {isVoting\n                  ? \"Voting...\"\n                  : hasVoted\n                    ? \"You Already Voted\"\n                    : \"Submit Votes\"}\n              </button>\n              <small>\n                This will trigger multiple transactions that you will need to\n                sign.\n              </small>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n\n\tconst mintNft = () => {\n\t\tsetIsClaiming(true);\n\t\t// Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n\t\tbundleDropModule\n\t\t.claim(\"0\", 1)\n\t\t.catch((err) => {\n\t\t\tconsole.error(\"failed to claim\", err);\n\t\t\tsetIsClaiming(false);\n\t\t})\n\t\t.finally(() => {\n\t\t\t// Stop loading state.\n\t\t\tsetIsClaiming(false);\n\t\t\t// Set claim state.\n\t\t\tsetHasClaimedNFT(true);\n\t\t\t// Show user their fancy new NFT!\n\t\t\tconsole.log(\n\t\t\t`ðŸŒŠ Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n\t\t\t);\n\t\t});\n\t}\n\t\n\t// Render mint nft screen.\n\treturn (\n\t<div className=\"mint-nft\">\n\t\t<h1>Mint your free ðŸ¦–DAO Membership NFT</h1>\n\t\t<button\n\t\tdisabled={isClaiming}\n\t\tonClick={() => mintNft()}\n\t\t>\n\t\t{isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n\t\t</button>\n\t</div>\n\t);\n\n\t\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport { ThirdwebWeb3Provider } from \"@3rdweb/hooks\";\n\nconst supportedChainIds = [4];\nconst connectors = { injected: {} };\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThirdwebWeb3Provider\n            connectors={ connectors }\n            supportedChainIds={ supportedChainIds }\n        >\n\t\t\t<div className=\"landing\">\n            \t<App />\n\t\t\t</div>\n        </ThirdwebWeb3Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}